- name: Install applications on Ubuntu
  hosts: all
  become: yes
  tasks:
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

# Install APT Applications
    - name: Install Apt packages
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - curl
        - wget
        - git
        - vim
        - zsh
        - build-essential
        - autoconf
        - make
        - libssl-dev
        - ca-certificates
        - htop
        - firefox
        - blender
        - vlc
        - filezilla
        - inotify-tools
        - eza
        - zoxide
        - fzf
        - docker-compose

# Installing Flatpak and Applications
    - name: Add Flatpak repository
      apt_repository:
        repo: 'ppa:flatpak/stable'
        state: present

    - name: Install Flatpak
      apt:
        name: flatpak
        state: present
    - name: Update and upgrade apt packages
      apt:
        update_cache: yes
        upgrade: dist

    - name: Ensure Flatpak is installed
      ansible.builtin.apt:
        name: flatpak
        state: present
      register: flatpak_install_result
      ignore_errors: true  # Continue even if Flatpak is already installed

    - name: Add Flathub remote
      community.general.flatpak_remote:
        name: flathub
        state: present
        flatpakrepo_url: https://flathub.org/repo/flathub.flatpakrepo
      when: flatpak_install_result.changed or not flatpak_install_result.failed # Add Flathub only if Flatpak was installed or not failed

    - name: Install Flatpak applications
      community.general.flatpak:
        name: "{{ item }}"  # Use the item from the loop as the Flatpak application name
        state: present
        remote: flathub  # Specify the Flathub remote for installation
#    - name: Install Flatpak packages
#      command: "flatpak install {{ item }}" -y
      loop:
        - com.obsproject.Studio
        - org.tenacityaudio.Tenacity
        - md.obsidian.Obsidian
        - org.gimp.GIMP
        - com.github.zadam.trilium
        - com.spotify.Client
        - io.github.shiftey.Desktop
        - com.brave.Browser
        - com.visualstudio.code
        - org.qbittorrent.qBittorrent
      register: result  # Register the result of the command
      failed_when: result.rc != 0 # Fail if return code is not 0
      retries: 3  # Add retries in case of transient network issues
      delay: 5    # Wait a few seconds between retries
      until: result.rc == 0
      tags: flatpak # Tagging for potential skipping

# Install Starship Prompt
    - name: Get Starship install script
      get_url:
        url: https://starship.rs/install.sh
        dest: /tmp/starship_install.sh
        mode: '0755'
      register: starship_install_script

    - name: Install Starship
      shell: /tmp/starship_install.sh --yes
      args:
        executable: /bin/sh
      when: starship_install_script.changed

    - name: Add Starship init to .zshrc
      lineinfile:
        path: ~/.zshrc
        line: 'eval "$(starship init zsh)"'
        insertafter: EOF
        create: yes
      become: false

# Install Terraform
    - name: Add HashiCorp GPG key
      ansible.builtin.shell: |
        wget -O- https://apt.releases.hashicorp.com/gpg | \
        gpg --dearmor | \
        sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
      args:
        creates: /usr/share/keyrings/hashicorp-archive-keyring.gpg
      when: ansible_os_family == "Debian" #  Only run on Debian-based systems

    - name: Add HashiCorp APT repository
      ansible.builtin.apt_repository:
        repo: "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] https://apt.releases.hashicorp.com {{ ansible_distribution_release }} main"
        state: present
        filename: hashicorp
      when: ansible_os_family == "Debian"

    - name: Update apt cache again after adding repository
      ansible.builtin.apt:
        update_cache: yes
      when: ansible_os_family == "Debian"

    - name: Install Terraform
      ansible.builtin.apt:
        name: terraform
        state: present
      when: ansible_os_family == "Debian"

    # --- Zsh Completion ---
    - name: Install zsh (if not already installed)
      ansible.builtin.apt:
        name: zsh
        state: present

    - name: Install Terraform autocomplete for Zsh
      ansible.builtin.shell: "terraform -install-autocomplete"
      args:
        executable: /bin/zsh
        #  Use a dummy ~/.zshrc file to prevent unexpected prompts or modifications
        #  from the terraform -install-autocomplete command during automation.
        #  It's crucial to explicitly manage ~/.zshrc content within Ansible tasks.
        stdin: 'source ~/.zshrc'

    - name: Verify Terraform installation
      ansible.builtin.command: terraform -version
      register: terraform_version_output
      changed_when: false

    - name: Display Terraform version
      ansible.builtin.debug:
        var: terraform_version_output.stdout

    - name: Confirm Zsh completion setup (manual verification suggested)
      ansible.builtin.debug:
        msg: "Please log in to your Zsh shell and try typing 'terraform ' followed by TAB to test autocompletion."

# Install flyctl
    - name: Ensure zsh is installed
      ansible.builtin.apt:
        name: zsh
        state: present

    - name: Download flyctl installation script
      ansible.builtin.get_url:
        url: https://fly.io/install.sh
        dest: /tmp/install.sh
        mode: '0755'  # Make the script executable

    - name: Run flyctl installation script
      ansible.builtin.shell: /tmp/install.sh
      args:
        creates: /usr/local/bin/flyctl  # Prevents rerunning if flyctl is already installed

    - name: Add flyctl completion to .zshrc
      ansible.builtin.lineinfile:
        path: "~/.zshrc"
        insertafter: EOF
        line: |
          # Flyctl completions
          autoload -U compinit; compinit
          flyctl completion zsh > "${fpath[1]}/_flyctl"
          compdef _flyctl fly  # Alias flyctl to fly for completions


# Install PowerLine10k and Oh-My-Zsh

    - name: Install Oh My Zsh
      shell: sh -c "$(curl -fsSL https://raw.githubusercontent.com/ohmyzsh/ohmyzsh/master/tools/install.sh)"
      args:
        creates: "~/.oh-my-zsh"

    - name: Download Powerlevel10k theme
      git:
        repo: 'https://github.com/romkatv/powerlevel10k.git'
        dest: "~/.oh-my-zsh/custom/themes/powerlevel10k"
        depth: 1
      args:
        creates: "~/.oh-my-zsh/custom/themes/powerlevel10k"

    - name: Install Powerline fonts (MesloLGS NF)
      block:
        - name: Create .fonts directory if it doesn't exist
          file:
            path: "~/.fonts"
            state: directory

        - name: Download MesloLGS NF fonts
          get_url:
            url: "https://github.com/romkatv/powerlevel10k-media/raw/master/MesloLGS%20NF%20{{ item }}.ttf"
            dest: "~/.fonts/MesloLGS%20NF%20{{ item }}.ttf"
          loop:
            - Regular
            - Bold
            - Italic
            - Bold%20Italic

        - name: Update font cache
          command: fc-cache -f -v
          args:
            warn: false # Suppress warning about potential issues

    - name: Set Powerlevel10k as the Oh My Zsh theme
      lineinfile:
        path: "~/.zshrc"
        regexp: '^ZSH_THEME=".*"$'
        line: 'ZSH_THEME="powerlevel10k/powerlevel10k"'
        backup: yes

    - name: Add zsh-autosuggestions plugin
      git:
        repo: 'https://github.com/zsh-users/zsh-autosuggestions.git'
        dest: "~/.oh-my-zsh/custom/plugins/zsh-autosuggestions"
        depth: 1
      args:
        creates: "~/.oh-my-zsh/custom/plugins/zsh-autosuggestions"

    - name: Add zsh-syntax-highlighting plugin
      git:
        repo: 'https://github.com/zsh-users/zsh-syntax-highlighting.git'
        dest: "~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"
        depth: 1
      args:
        creates: "~/.oh-my-zsh/custom/plugins/zsh-syntax-highlighting"

    - name: Enable zsh-autosuggestions and zsh-syntax-highlighting plugins
      lineinfile:
        path: "~/.zshrc"
        regexp: '^plugins=\((.*)\)$'
        line: 'plugins=(git zsh-autosuggestions zsh-syntax-highlighting)' # You can customize the plugins list
        backup: yes

    - name: Restart Zsh session (optional, for immediate effect)
      shell: "exec zsh"
      ignore_errors: true # This command might not always return a success code

    - name: Run Powerlevel10k configuration wizard (manual step)
      debug:
        msg: "Powerlevel10k requires manual configuration after installation. Please open a new Zsh session and type 'p10k configure' to customize your prompt."

# Installing Zsh and Oh My Zsh
    - name: Add aliases to .zshrc file
      lineinfile:
        path: ~/.zshrc
        regexp: '^export PATH.*'  # Prevent duplicates if already present
        line: 'export PATH="$HOME/.local/bin:$PATH"'
      notify: Reload Zsh

    - name: Add source command to .zshrc file
      lineinfile:
        path: ~/.zshrc
        regexp: '^source \.zshrc$'  # Prevent duplicates if already present
        line: 'source ~/.zshrc'
      notify: Reload Zsh

#    handlers:
    - name: Reload Zsh
      command: source ~/.zshrc
      become_user: $USER # Ensure it runs as the current user

# To run - run the following command. ansible-playbook -i inventory install_apps.yml





